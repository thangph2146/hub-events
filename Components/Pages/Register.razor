@page "/register"
@using hub_events.Services
@using hub_events.Models
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Đăng ký</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Đăng ký</h3>
            </div>
            <div class="card-body">
                <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="register_form">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                    
                    @if (isSuccess)
                    {
                        <div class="alert alert-success">
                            Đăng ký thành công! <a href="/login">Đăng nhập ngay</a>
                        </div>
                    }
                    
                    <div class="form-group mb-3">
                        <label for="fullName">Họ tên</label>
                        <InputText id="fullName" @bind-Value="registerModel.FullName" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.FullName)" />
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Mật khẩu</label>
                        <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="confirmPassword">Xác nhận mật khẩu</label>
                        <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Đang xử lý...</span>
                            }
                            else
                            {
                                <span>Đăng ký</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p>Đã có tài khoản? <a href="/login">Đăng nhập</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private bool isSuccess = false;
    private string? errorMessage;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        isSuccess = false;
        
        try
        {
            // Kiểm tra mật khẩu xác nhận
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Mật khẩu xác nhận không khớp";
                return;
            }
            
            // Kiểm tra email đã tồn tại
            var existingUser = await UserService.GetByEmailAsync(registerModel.Email);
            if (existingUser != null)
            {
                errorMessage = "Email này đã được sử dụng";
                return;
            }
            
            // Tạo user mới
            var newUser = new User
            {
                Email = registerModel.Email,
                FullName = registerModel.FullName,
                IsActive = true,
                CreatedAt = DateTime.Now
            };
            
            var result = await UserService.RegisterAsync(newUser, registerModel.Password);
            
            if (result)
            {
                isSuccess = true;
                registerModel = new RegisterModel(); // Reset form
            }
            else
            {
                errorMessage = "Có lỗi xảy ra khi đăng ký. Vui lòng thử lại sau.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi đăng ký: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Họ tên là bắt buộc")]
        [StringLength(50, ErrorMessage = "Họ tên không được vượt quá 50 ký tự")]
        public string FullName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Email là bắt buộc")]
        [EmailAddress(ErrorMessage = "Email không hợp lệ")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Mật khẩu là bắt buộc")]
        [MinLength(6, ErrorMessage = "Mật khẩu phải có ít nhất 6 ký tự")]
        public string Password { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Vui lòng xác nhận mật khẩu")]
        [Compare("Password", ErrorMessage = "Mật khẩu xác nhận không khớp")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
} 